// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using server.Data;

#nullable disable

namespace server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251024211901_RemoveDirectReplies")]
    partial class RemoveDirectReplies
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("server.Models.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "A bug in the code",
                            Label = "Bug"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Description = "A request for a new feature",
                            Label = "Feature Request"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Description = "Issues related to documentation",
                            Label = "Documentation"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Description = "A question about the code or project",
                            Label = "Question"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Description = "An enhancement to existing functionality",
                            Label = "Enhancement"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Description = "Performance-related issues or improvements",
                            Label = "Performance"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Description = "Security vulnerabilities or concerns",
                            Label = "Security"
                        });
                });

            modelBuilder.Entity("server.Models.Comments.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Depth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<Guid>("LocationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("RootCommentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("LocationId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("RootCommentId");

                    b.HasIndex("ProjectId", "RootCommentId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("server.Models.Locations.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Locations", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("server.Models.Projects.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReadWriteApiUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RepositoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServerBaseUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("1.0");

                    b.HasKey("Id");

                    b.HasIndex("RepositoryId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("server.Models.Projects.Repository", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("main");

                    b.Property<string>("CommitHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RepositoryType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("github");

                    b.Property<string>("RepositoryUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Repositories");
                });

            modelBuilder.Entity("server.Models.Locations.FileLocation", b =>
                {
                    b.HasBaseType("server.Models.Locations.Location");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("FileLocations", (string)null);
                });

            modelBuilder.Entity("server.Models.Locations.MultilineLocation", b =>
                {
                    b.HasBaseType("server.Models.Locations.Location");

                    b.Property<int>("EndLineNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StartLineNumber")
                        .HasColumnType("INTEGER");

                    b.ToTable("MultilineLocations", (string)null);
                });

            modelBuilder.Entity("server.Models.Locations.ProjectLocation", b =>
                {
                    b.HasBaseType("server.Models.Locations.Location");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("ProjectLocations", (string)null);
                });

            modelBuilder.Entity("server.Models.Locations.SinglelineLocation", b =>
                {
                    b.HasBaseType("server.Models.Locations.Location");

                    b.Property<int>("LineNumber")
                        .HasColumnType("INTEGER");

                    b.ToTable("SinglelineLocations", (string)null);
                });

            modelBuilder.Entity("server.Models.Comments.Comment", b =>
                {
                    b.HasOne("server.Models.Categories.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("server.Models.Locations.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Comments.Comment", "ParentComment")
                        .WithMany()
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("server.Models.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Comments.Comment", "RootComment")
                        .WithMany("ThreadReplies")
                        .HasForeignKey("RootCommentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Category");

                    b.Navigation("Location");

                    b.Navigation("ParentComment");

                    b.Navigation("Project");

                    b.Navigation("RootComment");
                });

            modelBuilder.Entity("server.Models.Projects.Project", b =>
                {
                    b.HasOne("server.Models.Projects.Repository", "Repository")
                        .WithMany()
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("server.Models.Locations.FileLocation", b =>
                {
                    b.HasOne("server.Models.Locations.Location", null)
                        .WithOne()
                        .HasForeignKey("server.Models.Locations.FileLocation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("server.Models.Locations.MultilineLocation", b =>
                {
                    b.HasOne("server.Models.Locations.Location", null)
                        .WithOne()
                        .HasForeignKey("server.Models.Locations.MultilineLocation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("server.Models.Locations.ProjectLocation", b =>
                {
                    b.HasOne("server.Models.Locations.Location", null)
                        .WithOne()
                        .HasForeignKey("server.Models.Locations.ProjectLocation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("server.Models.Locations.SinglelineLocation", b =>
                {
                    b.HasOne("server.Models.Locations.Location", null)
                        .WithOne()
                        .HasForeignKey("server.Models.Locations.SinglelineLocation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("server.Models.Comments.Comment", b =>
                {
                    b.Navigation("ThreadReplies");
                });
#pragma warning restore 612, 618
        }
    }
}
